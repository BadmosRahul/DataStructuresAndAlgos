
class Solution {
public:
 
    long long minimumDifference(vector<int>& nums) {
        int n = nums.size()/3;

        priority_queue<long long,vector<long long>,greater<long long>> minHeap;

        priority_queue<long long> maxHeap;

        vector<long long> mini(nums.size(),-1);
        vector<long long >maxi(nums.size(),-1);

        long long sum = 0;

        for(int i = 0; i < nums.size(); ++i){
            sum+= nums[i];

            maxHeap.push(nums[i]);

            if(maxHeap.size() > n){
                sum-= maxHeap.top();
                maxHeap.pop();
            }

            if(maxHeap.size() == n){
                mini[i] = sum;
            }

        }

    sum = 0;
   for(int i = nums.size() - 1; i >=0; --i){
            sum+= nums[i];

            minHeap.push(nums[i]);

            if(minHeap.size() > n){
                sum-= minHeap.top();
                minHeap.pop();
            }

            if(minHeap.size() == n){
                maxi[i] = sum;
            }

        }
     

       
        
        long long ans = LONG_LONG_MAX;
        for(int i = n -1; i < 2*n ; i++){
            ans = min(ans,mini[i] - maxi[i+1]);
            cout << ans<<" ";
        }

        return ans;

    }
};
