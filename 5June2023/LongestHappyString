class Solution {
public:
    string longestDiverseString(int a, int b, int c) {
        string str ="";

        priority_queue<pair<int,char>> maxHeap;

        if( a > 0 ){
            maxHeap.push({a,'a'});    
        }
        
        if(b > 0){
            maxHeap.push({b,'b'});
        }

        if(c > 0){
            maxHeap.push({c,'c'});
        }
        
        while(maxHeap.size() > 1){
            auto temp1 = maxHeap.top();
            maxHeap.pop();
            auto temp2 = maxHeap.top();
            maxHeap.pop();


            if(temp1.first > 1){
                str+= temp1.second;
                str+= temp1.second;
                temp1.first-=2;
            }

            else{
                str+= temp1.second;
                temp1.first--;
            }

            if(temp2.first > 1 && temp2.first >= temp1.first){
                str+= temp2.second;
                str+= temp2.second;
                temp2.first-=2;
            }

            else{
                str+= temp2.second;
                temp2.first--;
            }

            if(temp1.first > 0){
                maxHeap.push({temp1.first,temp1.second});
            }
            if(temp2.first > 0){
                maxHeap.push({temp2.first,temp2.second});
            }
        }

        if(maxHeap.size()==1){
            auto top = maxHeap.top();
            maxHeap.pop();
            if(top.first >1){
                str+=top.second;
                str+=top.second;
           
            }

            else{
                str+=top.second;
            }
        }
        return str;
    }
};
