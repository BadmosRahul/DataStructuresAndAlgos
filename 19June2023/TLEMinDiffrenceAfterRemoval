class temp{
public:

long long val;
long long index;

temp(long long val,long long index){
    this->val = val;
    this->index = index;
}

};

class comp{

public:

bool operator()(temp*a ,temp* b){
 return a->val > b->val;
}

};

class Solution {
public:
 
    long long minimumDifference(vector<int>& nums) {
        int n = nums.size()/3;

        priority_queue<long,vector<long>,greater<long>> minHeap;

        int minSum = INT_MAX;
        
        for(int i = n -1; i < 2*n; i++){
            for(int it = 0 ; it <= i; it ++){
                minHeap.push(nums[it]);
            }
            priority_queue<long> maxHeap;

            for(int j = i + 1; j < nums.size(); j ++){
                maxHeap.push(nums[j]);
            }
            int leftSum = 0;
            for(int it = 0; it < n; it++){
                leftSum += minHeap.top();
                minHeap.pop();
            }

            int rightSum = 0;
            for(int it = 0; it < n; it++){
                rightSum += maxHeap.top();
                maxHeap.pop();
            }

            minSum = min(minSum,leftSum - rightSum);
        }

        return minSum;


    }
};
