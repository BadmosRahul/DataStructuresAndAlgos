class compare{
public:

bool operator()(pair<double,vector<int>>a,pair<double,vector<int>>b){
return a.first > b.first;
}
};

class Solution {
public:
    
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<pair<double,vector<int>>,vector<pair<double,vector<int>>>,compare>pq;
        vector<vector<int>> ans;
        for(int i = 0; i < points.size();i++){
            double distance = 0;
            auto temp = points[i];
            int x = temp[0];
            int y = temp[1];
            distance = sqrt(pow(x,2) + pow(y,2));
            pq.push({distance,temp});
            // cout << "pushed"<<" ";
        }

        while(k!=0){
            auto top = pq.top();
            pq.pop();

            ans.push_back(top.second);
            k--;
        }
        return ans;
    }
};
